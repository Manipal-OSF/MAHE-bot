name: Lint, Build & Deploy

on: [push, pull_request]
concurrency: lint-build-push-${{ github.sha }}

jobs:
  lint:
    runs-on: ubuntu-latest

    env:
      PIP_CACHE_DIR: /tmp/pip-cache-dir
      POETRY_CACHE_DIR: /tmp/pip-cache-dir

    steps:
      - name: Checks out repository
        uses: actions/checkout@v2

      - name: Set up Python 3.11.1
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11.1

      # This step caches our Python dependencies. To make sure we
      # only restore a cache when the dependencies, the python version and
      # the runner operating system we create a cache key
      # that is a composite of those states.
      # Only when the context is exactly the same, we will restore the cache.
      - name: Restore pip cache
        uses: actions/cache@v2
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: "python-0-${{ runner.os }}-\
          ${{ steps.python.outputs.python-version }}-\
          ${{ hashFiles('./pyproject.toml', './poetry.lock') }}"

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install

      # Run flake8 and have it format the linting errors in the format of
      # the GitHub Workflow command to register error annotations. This
      # means that our flake8 output is automatically added as an error
      # annotation to both the run result and in the "Files" tab of a
      # pull request.
      #
      # Format used:
      # ::error file={filename},line={line},col={col}::{message}
      - name: Run flake8
        run: "poetry run flake8 \
        --format='::error file=%(path)s,line=%(row)d,col=%(col)d::[flake8] %(code)s: %(text)s'"

      # Run black
      - name: Run black
        run: poetry run black . --check --diff

  build:
    runs-on: ubuntu-latest
    needs:
      - lint
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    # Create a commit SHA-based tag for the container repositories
    - name: Create SHA Container Tag
      id: sha_tag
      run: |
        tag=$(cut -c 1-7 <<< $GITHUB_SHA)
        echo "tag=$tag" >> $GITHUB_OUTPUT

    # Check out the current repository in the `bot` subdirectory
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        path: bot

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Github Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build and push the container to the GitHub Container
    # Repository. The container will be tagged as "latest"
    # and with the short SHA of the commit.
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: bot/
        file: bot/Dockerfile
        push: true
        cache-from: type=registry,ref=ghcr.io/Manipal-OSF/bot:latest
        cache-to: type=inline
        tags: |
          ghcr.io/Manipal-OSF/bot:latest
          ghcr.io/Manipal-OSF/bot:${{ steps.sha_tag.outputs.tag }}
        build-args: |
          git_sha=${{ github.sha }}
